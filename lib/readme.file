Superheroes API Project

Overview
>This project is a RESTful API built with Flask and SQLAlchemy.
>These manages superheroes, their powers, and the relationships between them.
>It serves as a foundation for understanding back-end web development with Python, including database modeling, REST API design, and data validation.

KEY TOPICS
>The following topics are covered in this implementation:

>Flask Framework

    .Route handling

    .Request/response cycle

    .Error handling

>Database Modeling

    .SQLAlchemy ORM

    .Model relationships (one-to-many, many-to-many)

    .Data validation

REST API DESIGN

    .Resource naming conventions

    .Proper HTTP methods

    .Status code usage

DATA VALIDATION

    .Model-level validation

    .Request payload validation

    .Error messaging

API Endpoints

HEROES
Endpoint	        Method	       Description
/heroes	            GET	           Retrieve all heroes
/heroes/<int:id>	GET	           Retrieve a specific hero

POWERS
Endpoint	        Method          Description
/powers	            GET	            Retrieve all powers
/powers/<int:id>	GET	            Retrieve a specific power
/powers/<int:id>	PATCH	        Update a power's description

HEROPOWERS
Endpoint	        Method	        Description
/hero_powers	    POST	            Create a hero-power relationship


LERNING OBJECTIVES
>>By working with this project, you will be able to:

.Design and implement a RESTful API with proper endpoints

.Model database relationships using SQLAlchemy

.Implement data validation at multiple levels

.Handle errors and return appropriate HTTP status codes

.Structure a Flask application with proper separation of concerns

.Use Flask-Migrate for database migrations

GETTING STARTED:
(1).Cclone the repostory
>>>>>git clone https://github.com/irarubrian/superheroes-api.git
cd superheroes-api

(2). Create and activate the vitual environment
>>>>>source venv/bin/activate

(3).Install dependencies
>>>>>pip install -r requirements.txt

(4).Initialis the database
    1.flask db init
    2.flask db migrate -m "Initial migration"
    3.flask db upgrade

>>>> Running the application
python3 app.py

The API will be available at http://localhost:5555

DATABASE SCHEMA

VALIDATION RULEs

(1)Power Description:

    .Must be present

    .Must be at least 20 characters long

(2)HeroPower Strength:

    .Must be one of: 'Strong', 'Weak', or 'Average'

[Flask Documentation](https://flask.palletsprojects.com/)
## ðŸ”— Helpful Links

### Documentation
- [Flask](https://flask.palletsprojects.com/) - Web framework
- [SQLAlchemy](https://www.sqlalchemy.org/) - ORM
- [REST API Design Guide](https://www.freecodecamp.org/news/rest-api-best-practices/)

### Tools
- [Postman](https://www.postman.com/) - API testing
- [Swagger UI](https://swagger.io/tools/swagger-ui/) - API documentation

### Project Files
- [Database Schema](./docs/schema.png)
- [Example Requests](./examples/requests.md)